pipeline {
	agent any
	tools {
        jdk "OracleJDK11"
        jfrog 'jfrog-cli'
    }
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-token')
    }
	stages {
		stage ('Fetch code') {
			steps {
				git branch: 'test', url: 'https://github.com/matmajk/CICD-jenkins-terraform-aws-project'
			}
		}
		stage ('Build') {
			steps {
				sh 'ls'
				sh 'pwd'
			}
			post {
				success {
					echo "Archiving the artifacts"
					archiveArtifacts artifacts: '*/**', excludes: 'README.md'
				}
			}
		}
		stage('SonarQube analysis') {
        	environment {
        		scannerHome = tool 'sonar4.7'
        	}
        	steps {
                withSonarQubeEnv('sonar-qube') {
					sh '''${scannerHome}/bin/sonar-scanner -X -Dsonar.projectKey=NoteApp \
                        -Dsonar.projectName=note-web-app \
                        -Dsonar.projectVersion=1.0 \
                        -Dsonar.sources=. \
                        -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                        -Dsonar.junit.reportsPath=target/surefire-reports/ \
                        -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                        -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
              	}
        	}
        }
        stage('Quality gate') {
        	steps {
        		timeout(time: 3, unit: 'MINUTES') {
        			waitForQualityGate abortPipeline: true
        		}
        	}
        }
        stage('Packing to archive') {
		    steps {
		        script {
		            sh "tar -czvf web-app-archive_${BUILD_NUMBER}.tar.gz website Dockerfile main.py requirements.txt"
		        }
		        archiveArtifacts artifacts: 'web-app-archive*.tar.gz', onlyIfSuccessful: true
		    }
		}
    }
}